package LetterGoProject.LetterGoServer;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.imageio.ImageIO;

	import java.util.Base64;

/**
 * Class that define the functions of the API.
 * 
 * @author David Garcia Centelles
 * 
 */
@Path("functions")
@Api(value = "/functions", description = "Functions")
public class Functions {
	
    /**
     * Response 200. 
     */
    static final int R200 = 200;
	
	/**
     * Hello World Function. 
     * @return Hello World JSON.
     */
    @GET
    @Path("/helloWorld")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Hello World function")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK") })
    public Response helloWorld() { 
        
    	JsonObject response = Json.createObjectBuilder()
    	           .add("helloWorld", "Hello World")
    	           .build();
    	
    	return Response.status(R200).entity(response).build();
    }   
    
	/**
     * Send Results (POST). 
     * @return Score in JSON.
     */
    @POST
    @Path("/sendResults")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Send results from client")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK") })
    public Response helloWorldPost(final String request) { 
    	
        //Interpreting the received string as a JSON. 
        JsonReader jsonReader = Json.createReader(new StringReader(request));
        JsonObject obj = jsonReader.readObject();
        jsonReader.close();

    	String username = obj.getString("username");
    	String letter = obj.getString("letter");
    	String picture = obj.getString("picture");
    	
    	try {
			byte[] imageByte = Base64.getDecoder().decode(text);
			BufferedImage bi = createImageFromBytes(imageByte);
	    	File outputfile = new File("DB/saved.png");
	    	ImageIO.write(bi, "png", outputfile);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
    	JsonObject response = Json.createObjectBuilder()
    	           .add("helloWorld", text)
    	           .build();
    	
    	return Response.status(R200).entity(response).build();
    }  
    
    private BufferedImage createImageFromBytes(byte[] imageData) {
        ByteArrayInputStream bais = new ByteArrayInputStream(imageData);
        try {
            return ImageIO.read(bais);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
