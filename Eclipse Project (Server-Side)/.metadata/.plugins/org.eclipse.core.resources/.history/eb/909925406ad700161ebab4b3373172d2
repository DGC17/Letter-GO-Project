package lettergo.server; 

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;

import lettergo.data.AlbumElement;
import lettergo.data.GameData;
import lettergo.data.HistoryElement;
import lettergo.data.User;
import lettergo.responses.Invalid;
import lettergo.responses.NotRegistered;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;

import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObject;
import javax.imageio.ImageIO;

import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import java.net.URLDecoder;

/**
 * Class that define the functions of the API.
 * 
 * @author David Garcia Centelles
 * 
 */
@Path("functions")
@Api(value = "/functions", description = "Functions")
public final class Functions {
	
    /**
     * TOP 10. 
     */
    static final int T10 = 10;
	
	/**
     * Response 200. 
     */
    static final int R200 = 200;
    
    /**
     * Response 400.
     */
    static final int R400 = 400;
    
    /**
     * Response 406.
     */
    static final int R406 = 406;
    
    /**
     * Generate Letter (GET). 
     * Generates a new letter to "capture" for an user, 
     * and sends it to the user. 
     * 
     * @return Response.
     */
    @GET
    @Path("/generateLetter")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "generates a new letter for the user")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK")})
    public Response generateLetter() { 
 	
    	System.out.println("GET [Generate Letter Call]");
    	
    	//Generates the letter.
    	String[] letters = GameData.getLetters();
    	
    	ArrayList<String> weightedLetters = getWeightedLetters(letters);
    	
    	Random index = new Random();
    	int n = index.nextInt(weightedLetters.size());
    	
    	//Builds the JSON with the generated letter.
    	JsonObject response = Json.createObjectBuilder()
	  	           .add("letter", weightedLetters.get(n))
	  	           .build();
	  	
	   return Response.status(R200).entity(response).build();
    }
    
    /**
     * Add User (POST). 
     * Adds a user to the application.
     * 
     * @return Response.
     * @param request Request.
     */
    @POST
    @Path("/addUser")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Add User to the DB")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK"),
        @ApiResponse(code = R400, 
        	message = "This username is already registered")})
    public Response addUser(final String request) { 
    	
    	//Extract the values from the data of the request. 
    	//The format of the data is: "label1=value1&label2=value2&...".
    	String username = request.split("&")[0].split("=")[1];
    	String password = request.split("&")[1].split("=")[1];
    	
    	try {
    		username = URLDecoder.decode(username, "UTF-8");
    		password = URLDecoder.decode(password, "UTF-8");
		} catch (UnsupportedEncodingException e1) {
			System.out.println("There was an error decoding the input!");
			e1.printStackTrace();
		}
    	
    	
    	System.out.println("POST [Login User Call] (User Name: " + username 
    			+ ", Password: " + password + ")");
    	
    	//If the username used arealdy exists, we send a custom exception.
    	if (Main.getGameData().isUsernameRegistered(username)) {
    		throw new Invalid("This username is already registered").except();
    	}
 	
    	//Adds the new users to the DB.
    	Main.getGameData().addUser(username, password);
    	
    	return Response.status(R200).build();
    }
    
    /**
     * Login User (POST). 
     * Logins the user in the application and returns his score.
     * 
     * @return Response.
     * @param request Request.
     */
    @POST
    @Path("/loginUser")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Add User to the DB")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK"),
        @ApiResponse(code = R400, message = "User or Password are incorrect")})
    public Response loginUser(final String request) { 
    	
    	//Extract the values from the data of the request. 
    	//The format of the data is: "label1=value1&label2=value2&...".
    	String username = request.split("&")[0].split("=")[1];
    	String password = request.split("&")[1].split("=")[1];
    	
    	try {
    		username = URLDecoder.decode(username, "UTF-8");
    		password = URLDecoder.decode(password, "UTF-8");
		} catch (UnsupportedEncodingException e1) {
			System.out.println("There was an error decoding the input!");
			e1.printStackTrace();
		}
    	
    	System.out.println("POST [Login User Call] (User Name: " + username 
    			+ ", Password: " + password + ")");
    	
    	//If the username is registered in the DB...
    	if (Main.getGameData().isUsernameRegistered(username)) {
    		//We get the password of that user...
    		int i = Main.getGameData().getUserIndexWithName(username);
    		String pass = Main.getGameData().getUsers().get(i).getPassword();
    		//If the password is correct... 
    		if (password.equals(pass)) {
    	    	
    			//Builds the JSON with the score of the user.
    			JsonObject response = Json.createObjectBuilder()
    	  	           .add("score", Main.getGameData().
    	  	        		   getUsers().get(i).getPoints())
    	  	           .build();
    	  	
    	     	return Response.status(R200).entity(response).build();
    	     	
    		} else {
    			//If the username doesn't exist, we send a custom exception. 
    			throw new Invalid("User or Password are incorrect").except();
    		}
    	} else {
    		//If the username doesn't exist, we send a custom exception. 
    		throw new Invalid("User or Password are incorrect").except();
    	}
    }    
    
	/**
     * Send Results (POST). 
     * Send the results of the recognition of an image to the server,
     * updates the score, updates the letter count and saves the image inside
     * the specific directory of the server. 
     * 
     * @return Response.
     * @param request Request.
     */
    @POST
    @Path("/sendResults")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Send results from client")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK"),
        @ApiResponse(code = R400, message = "This isn't a valid letter"),
        @ApiResponse(code = R406, message = "This username doesn't exists")})
    public Response sendResults(final String request) { 

    	//Extract the values from the data of the request. 
    	//The format of the data is: "label1=value1&label2=value2&...".
    	String username = request.split("&")[0].split("=")[1];
    	String letter = request.split("&")[1].split("=")[1];
    	String picture = request.split("&")[2].split("=")[1];
    	String recognized = request.split("&")[3].split("=")[1];
    	String location = request.split("&")[4].split("=")[1];
    	double score = Double.parseDouble(request.split("&")[5].split("=")[1]);
    	double time = Double.parseDouble(request.split("&")[6].split("=")[1]);
    	String letters = request.split("&")[7].split("=")[1];
    	String letterPosition = request.split("&")[8].split("=")[1];
    	int imageLetterSize = Integer.parseInt(request.split("&")[9].split("=")[1]);
 
    	try {
    		username = URLDecoder.decode(username, "UTF-8");
    		letter = URLDecoder.decode(letter, "UTF-8");
    		picture = URLDecoder.decode(picture, "UTF-8");
    		recognized = URLDecoder.decode(recognized, "UTF-8");
    		location = URLDecoder.decode(location, "UTF-8");
    		letters = URLDecoder.decode(letters, "UTF-8");
    		letterPosition = URLDecoder.decode(letterPosition, "UTF-8");
		} catch (UnsupportedEncodingException e1) {
			System.out.println("There was an error decoding the input!");
			e1.printStackTrace();
		}
	
    	System.out.println("POST [Send Results Call] (User Name: " + username 
    			+ ", Letter: " + letter + ", Result: " + recognized + ")");
    	
    	//If the username doesn't exist we send a custom exception. 
    	if (!Main.getGameData().isUsernameRegistered(username)) {
    		System.out.println("Username not registered!");
    		throw new NotRegistered("This username doesn't exists").except();
    	}
    	
    	//If the letter isn't allowed in the application we 
    	//send a custom exception.
    	if (!Main.getGameData().isValidLetter(letter)) {
    		System.out.println("Invalid Letter!");
    		throw new Invalid("This isn't a valid letter").except();
    	}
    	
    	//Update User Score. 
    	Main.getGameData().updateScore(username, score);
    	
    	//Save Picture
    	String imagePath = "Not Saved";
    	
    	if (!recognized.equals("NoLetter")) {
    		
    		if (!recognized.equals("AnotherLetter")) {
    			//Update Letters of User. 
    	    	Main.getGameData().addLetterToUser(letter, username);
    		}
	    	
	    	//Update Letter Count.
	    	double letterCount = Main.getGameData().updateLetterCount(letter); 
	    	
	    	imagePath = Main.getDbPath() + "/Letters/"
	    			+ letter + "/" + (int) letterCount + ".png";
	    	
	    	try {
	    		byte[] imageByte = Base64.getDecoder().decode(picture);
				BufferedImage bi = createImageFromBytes(imageByte);
		    	File outputfile = new File(imagePath);
		    	ImageIO.write(bi, "png", outputfile);
			} catch (IOException e) {
				System.out.println("There was an error saving the image!");
				e.printStackTrace();
			} 
    	}
    	
    	Date d = new Date();
    	Main.getGameData().addHistoryElement(
    			username, letter, imagePath, recognized, d, 
    			location, score, time, letters);
    	
    	return Response.status(R200).build();
    }  
    
    /**
     * Get Top 10 (GET). 
     * Returns a list with 10 users with the best score. 
     * 
     * @return Response.
     */
    @GET
    @Path("/getTop10")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "returns a list with 10 users with the best score")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK")})
    public Response getTop10() { 
    	
    	System.out.println("GET [Get Top 10 Call]");
    	
        JsonArrayBuilder builder = Json.createArrayBuilder();	
        ArrayList<User> top = Main.getGameData().getTop(T10);
        
        for (User u: top) {
            builder.add(Json.createObjectBuilder()
                    .add("username", u.getUsername())
                    .add("score", u.getPoints()));
        }

        JsonArray topFinal = builder.build();
	  	
	   return Response.status(R200).entity(topFinal).build();
    }
    
    /**
     * Get Album (POST). 
     * Gets the Album of an User.
     * 
     * @return Response.
     * @param request Request.
     */
    @POST
    @Path("/getAlbum")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "get the Album of an User")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK")})
    public Response getAlbum(final String request) { 
    	
    	//Extract the values from the data of the request. 
    	//The format of the data is: "label1=value1&label2=value2&...".
    	String username = request.split("=")[1];
    	
    	try {
    		username = URLDecoder.decode(username, "UTF-8");
		} catch (UnsupportedEncodingException e1) {
			System.out.println("There was an error decoding the input!");
			e1.printStackTrace();
		}
    	
    	System.out.println("POST [Get Album Call] (User Name: " 
    			+ username + ")");
    	
		JsonArrayBuilder builder = Json.createArrayBuilder();	
        ArrayList<AlbumElement> album = 
        		Main.getGameData().getAlbumOfUser(username);
        
        for (AlbumElement ae: album) {
            builder.add(Json.createObjectBuilder()
                    .add("title", ae.getTitle())
                    .add("author", ae.getAuthor())
                    .add("rate", ae.getCompletionRate()));
        }

        JsonArray albumFinal = builder.build();
	  	
	   return Response.status(R200).entity(albumFinal).build();
    }
    
    /**
     * Get Global Album (GET). 
     * Gets the Global Album.
     * 
     * @return Response.
     */
    @GET
    @Path("/getGlobalAlbum")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "gets the Global Album")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK")})
    public Response getGlobalAlbum() { 

    	System.out.println("GET [Get Global Album Call]");
    	
		JsonArrayBuilder builder = Json.createArrayBuilder();	
        ArrayList<AlbumElement> album = 
        		GameData.getGlobalAlbum();
        
        for (AlbumElement ae: album) {
            builder.add(Json.createObjectBuilder()
                    .add("title", ae.getTitle())
                    .add("author", ae.getAuthor())
                    .add("rate", ae.getCompletionRate()));
        }

        JsonArray albumFinal = builder.build();
	  	
	   return Response.status(R200).entity(albumFinal).build();
    }
    
    /**
     * Get Album Element (POST). 
     * Gets an Album Element from an Album of an User.
     * 
     * @return Response.
     * @param request Request.
     */
    @POST
    @Path("/getAlbumElement")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "get an Album Element of an Album of an User")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK")})
    public Response getAlbumElement(final String request) { 
    	
    	//Extract the values from the data of the request. 
    	//The format of the data is: "label1=value1&label2=value2&...".
    	String username = request.split("&")[0].split("=")[1];
    	String title = request.split("&")[1].split("=")[1];

    	try {
    		username = URLDecoder.decode(username, "UTF-8");
    		title = URLDecoder.decode(title, "UTF-8");
		} catch (UnsupportedEncodingException e1) {
			System.out.println("There was an error decoding the input!");
			e1.printStackTrace();
		}
    	
    	System.out.println("POST [Get Album Element Call] (User Name: " 
    			+ username + ", Title: " + title + ")");
    	
    	AlbumElement ae = Main.getGameData().
    			getAlbumElementFromAlbumOfUser(title, username);
    	
    	JsonObject response = Json.createObjectBuilder()
	  	           .add("title", ae.getTitle())
	  	           .add("author", ae.getAuthor())
	  	           .add("text", ae.getIncompleteText())
	  	           .add("type", ae.getType())
	  	           .add("rate", ae.getCompletionRate())
	  	           .build();
	  	
	   return Response.status(R200).entity(response).build();
    }
    
    /**
     * Get Global Album Element (POST). 
     * Gets an Album Element from the Global Album.
     * 
     * @return Response.
     * @param request Request.
     */
    @POST
    @Path("/getGlobalAlbumElement")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "get an Album Element of the Global Album")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK")})
    public Response getGlobalAlbumElement(final String request) { 
    	
    	//Extract the values from the data of the request. 
    	//The format of the data is: "label1=value1&label2=value2&...".
    	String title = request.split("=")[1];
    	
    	try {
    		title = URLDecoder.decode(title, "UTF-8");
		} catch (UnsupportedEncodingException e1) {
			System.out.println("There was an error decoding the input!");
			e1.printStackTrace();
		}
    	
    	System.out.println("POST [Get Global Album Element Call] (Title: " 
    			+ title + ")");
    	
    	
    	AlbumElement ae = Main.getGameData().
    			getAlbumElementFromGlobalAlbum(title);
    	
    	JsonObject response = Json.createObjectBuilder()
	  	           .add("title", ae.getTitle())
	  	           .add("author", ae.getAuthor())
	  	           .add("text", ae.getIncompleteText())
	  	           .add("type", ae.getType())
	  	           .add("rate", ae.getCompletionRate())
	  	           .build();
	  	
	   return Response.status(R200).entity(response).build();
    }
    
    /**
     * Get Letters (POST). 
     * Gets the letters of an user.
     * 
     * @return Response.
     * @param request Request.
     */
    @POST
    @Path("/getLetters")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "get the Letters of an User")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK")})
    public Response getLetters(final String request) { 
    	
    	//Extract the values from the data of the request. 
    	//The format of the data is: "label1=value1&label2=value2&...".
    	String username = request.split("=")[1];
    	
    	try {
    		username = URLDecoder.decode(username, "UTF-8");
		} catch (UnsupportedEncodingException e1) {
			System.out.println("There was an error decoding the input!");
			e1.printStackTrace();
		}
    	
    	System.out.println("POST [Get Letters Call] (User Name: " 
    			+ username + ")");
    	
		JsonArrayBuilder builder = Json.createArrayBuilder();	
        ArrayList<String> letters = 
        		Main.getGameData().getLettersOfUser(username);
        
        for (String l: letters) {
            builder.add(l);
        }
        
        JsonObject response = 
        		Json.createObjectBuilder().add("letters", builder.build())
        			.build();
	  	
	   return Response.status(R200).entity(response).build();
    }
    
    /**
     * Get Tip (GET). 
     * Gets a random tip for the user. 
     * 
     * @return Response.
     */
    @GET
    @Path("/getTip")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "gets a random tip for the user.")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK")})
    public Response getip() { 
 	
    	System.out.println("GET [Get Tips Call]");
    	
    	//Generates the letter.
    	ArrayList<String> tips = GameData.getTips();
    	Random index = new Random();
    	int n = index.nextInt(tips.size());
    	
    	//Builds the JSON with the generated letter.
    	JsonObject response = Json.createObjectBuilder()
	  	           .add("tip", tips.get(n))
	  	           .build();
	  	
	   return Response.status(R200).entity(response).build();
    }
    
    /**
     * Fill Letter Album Element (POST). 
     * Tries to fill a letter in an album element.
     * 
     * @return Response.
     * @param request Request.
     */
    @POST
    @Path("/fillLetterAlbumElement")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "tries to fill a letter in an album element")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK"),
        @ApiResponse(code = R400, 
        	message = "This Letter isn't missing in the Album Element")})
    public Response fillLetterAlbumElement(final String request) { 
    	
    	//Extract the values from the data of the request. 
    	//The format of the data is: "label1=value1&label2=value2&...".
    	String letter = request.split("&")[0].split("=")[1];
    	String title = request.split("&")[1].split("=")[1];
    	String username = request.split("&")[2].split("=")[1];
    	
    	try {
    		letter = URLDecoder.decode(letter, "UTF-8");
    		title = URLDecoder.decode(title, "UTF-8");
    		username = URLDecoder.decode(username, "UTF-8");
		} catch (UnsupportedEncodingException e1) {
			System.out.println("There was an error decoding the input!");
			e1.printStackTrace();
		}
    	
    	System.out.println("POST [Fill Letter Album Element Call] (Letter: " 
    			+ letter + ", Title: " + title + ", User Name: " 
    			+ username + ")");
    	
    	double success = Main.getGameData().
    			fillLetterInAlbumElementOfUser(letter, title, username);
    	
    	if (success == -1d) {
    		throw new Invalid("This Letter isn't missing in the Album Element")
    			.except();
    	} else {
        	AlbumElement ae = Main.getGameData().
        			getAlbumElementFromAlbumOfUser(title, username);
        	JsonObject response = Json.createObjectBuilder()
 	  	           .add("title", ae.getTitle())
 	  	           .add("author", ae.getAuthor())
 	  	           .add("text", ae.getIncompleteText())
 	  	           .add("type", ae.getType())
 	  	           .add("rate", ae.getCompletionRate())
 	  	           .add("success", success)
 	  	           .build();
     	   return Response.status(R200).entity(response).build();
    	}
    }
    
    /**
     * Fill Letter Global Album Element (POST). 
     * Tries to fill a letter in an album element in the global album.
     * 
     * @return Response.
     * @param request Request.
     */
    @POST
    @Path("/fillGlobalLetterAlbumElement")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "tries to fill a letter in an "
    		+ "album element in the global album")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK"),
        @ApiResponse(code = R400, 
        	message = "This Letter isn't missing in the Album Element")})
    public Response fillLetterGlobalAlbumElement(final String request) { 
    	
    	//Extract the values from the data of the request. 
    	//The format of the data is: "label1=value1&label2=value2&...".
    	String letter = request.split("&")[0].split("=")[1];
    	String title = request.split("&")[1].split("=")[1];
    	String username = request.split("&")[2].split("=")[1];
    	
    	try {
    		letter = URLDecoder.decode(letter, "UTF-8");
    		title = URLDecoder.decode(title, "UTF-8");
    		username = URLDecoder.decode(username, "UTF-8");
		} catch (UnsupportedEncodingException e1) {
			System.out.println("There was an error decoding the input!");
			e1.printStackTrace();
		}
    	
    	System.out.println("POST [Fill Letter Global Album Element Call] "
    			+ "(Letter: " + letter + ", Title: " + title + ", "
    			+ "User Name: " + username + ")");
    	
    	double success = Main.getGameData().
    			fillLetterInGlobalAlbumElement(letter, title, username);
    	
    	if (success == -1d) {
    		throw new Invalid("This Letter isn't missing in the Album Element")
    			.except();
    	} else {
        	AlbumElement ae = Main.getGameData().
        			getAlbumElementFromGlobalAlbum(title);
        	JsonObject response = Json.createObjectBuilder()
 	  	           .add("title", ae.getTitle())
 	  	           .add("author", ae.getAuthor())
 	  	           .add("text", ae.getIncompleteText())
 	  	           .add("type", ae.getType())
 	  	           .add("rate", ae.getCompletionRate())
 	  	           .add("success", success)
 	  	           .build();
     	   return Response.status(R200).entity(response).build();
    	}
    }
    
    /**
    * Transform the picture from an array of bytes to a Buffered Image.
    * @param imageData Picture in an array of bytes.
    * @return Picture in Buffered Image.
    */
   private BufferedImage createImageFromBytes(final byte[] imageData) {
       ByteArrayInputStream bais = new ByteArrayInputStream(imageData);
       try {
           return ImageIO.read(bais);
       } catch (IOException e) {
           throw new RuntimeException(e);
       }
   }
   
   /**
    * Get the list of letters taking into account the frequency of apparition 
    * of this letters inside the English Language. 
    * Source: https://en.wikipedia.org/wiki/Letter_frequency
    * @param originalLetters Original Letters.
    * @return Final Letters
    */
   private ArrayList<String> getWeightedLetters(
   		final String[] originalLetters) {
   	ArrayList<String> finalLetters = new ArrayList<String>();

   	for (String l : originalLetters) {
       	int count = GameData.getWeights().get(l);

   		for (int i = 0; i < count; i++) {
   			finalLetters.add(l);
   		}
   	}
   	
   	return finalLetters;
   }
     
	/****************************************************/
	/************** STADISTICS CALLS ********************/
	/****************************************************/ 
    
    @GET
    @Path("/getHistory")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "gets the history.")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK")})
    public Response getHistory() { 
 	
    	System.out.println("GET [Get History]");
    		
        ArrayList<HistoryElement> history = 
        		Main.getGameData().getHistory();
        
        String his = "[HISTORY]\n\n";
        int count = 1;
        
        for (HistoryElement he: history) {
        	
        	his += "[" + count + "]\t";
        	his += "Username: " + he.getUsername() + "\t";
        	his += "Result: " + he.isRecognized() + "\t";
        	his += "Date: " + he.getDateRecognition() + "\n\t";
        	his += "Letter Searched: " + he.getLetter() + "\t";
        	his += "Letters Recognized: " + he.getLetters() + "\n\t";
        	his += "Recognition Time: " + he.getTime() + "\t";
        	his += "Image Path: " + he.getImagePath() + "\n\n"; 

        	count ++;
        }
	  	
	   return Response.status(R200).entity(his).build();
    }
    
    @GET
    @Path("/getStatistics")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "returns a list with 10 users with the best score")
    @ApiResponses(value = {
        @ApiResponse(code = R200, message = "OK")})
    public Response getStatistics() { 
    	
    	System.out.println("GET [Get Statistics]");
	  	
    	String statistics = "[STATISTICS]\n\n";
    	
    	statistics += getStatisticsLetters("Recognized", "RECOGNIZED LETTERS");
    	statistics += getStatisticsLetters("AnotherLetter", "MISS-RECOGNIZED LETTERS");
    	statistics += getStatisticsLetters("NoLetter", "NOT RECOGNIZED LETTERS");
    	statistics += getRatios();
    	
	   return Response.status(R200).entity(statistics).build();
    }
    
    private String getRatios() {
    	
    	String ratios = "[RATIOS]\n";
    	
    	ArrayList<HistoryElement> history = 
        		Main.getGameData().getHistory();
    	
    	float recognized = 0;
    	float anotherletter = 0;
    	float noletter = 0;
    	
    	for (HistoryElement he: history) {		
    		if (he.isRecognized().equals("Recognized")) recognized++;
    		if (he.isRecognized().equals("AnotherLetter")) anotherletter++;
    		if (he.isRecognized().equals("NoLetter")) noletter++;
        }
    	
    	ratios += "[Totals]\t\tRecognized: " + recognized + " - MissRecognized: " + anotherletter + " - NotRecognized: " + noletter + "\n";
    	ratios += "[Recognition Accuracy]\t" + (recognized/history.size() * 100) + "%\n";
    	ratios += "[Detection Accuracy]\t" + ((recognized + anotherletter)/history.size() * 100) + "%\n";
    	
    	ratios += "\n";
    	return ratios;
    	
    }
    
    private String getStatisticsLetters(String filter, String title) {
    	
    	HashMap<String, Integer> results = new HashMap<String, Integer>() {{
			put("A", 0); put("B", 0); put("C", 0); put("D", 0);
			put("E", 0); put("F", 0); put("G", 0); put("H", 0);
			put("I", 0); put("J", 0); put("K", 0); put("L", 0);
			put("M", 0); put("N", 0); put("O", 0); put("P", 0);
			put("Q", 0); put("R", 0); put("S", 0); put("T", 0);
			put("U", 0); put("V", 0); put("W", 0); put("X", 0);
			put("Y", 0); put("Z", 0);
    	}};
    	
    	ArrayList<HistoryElement> history = 
        		Main.getGameData().getHistory();
    	
    	for (HistoryElement he: history) {		
    		if (he.isRecognized().equals(filter)) {
    			results.put(he.getLetter(), results.get(he.getLetter()) + 1);
    		}
        }
    	
    	return printResults(results, title);
    }
    
    private String printResults(HashMap<String, Integer> results, String title) {
    	
    	String s = "[" + title + " (Letter - Number of Recognitions)]\n";
    	
    	int i = 0;
    	
    	String most = "None";
    	int mostvalue = 0;
    	
    	for(Map.Entry<String, Integer> entry : results.entrySet()) {  	    
    		String key = entry.getKey();
    	    int value = entry.getValue();	    
    	    
    	    s+= key + " - " + value + "\t";  
    	    i++;
    	    if (i == 13) { s += "\n"; i = 0; } 
    	    
    	    if (value >= mostvalue) {
    	    	mostvalue = value;
    	    	most = key;
    	    }
    	}
    	
    	s += "Greater: " + most  + " (" + mostvalue + ") \n\n";
    	
    	return s;
    }
}